#!/usr/bin/env bash

main () {
	update_pkgbuild
	index_packages

	# Import PGP keys from repo if any
	import_pgp_keys () {
		if [[ -d "$app_directory/keys" ]]; then
			gpg --import $app_directory/keys/pgp/*
		fi
	}

	# Check for build errors and log
	error_check () {
		if [[ ! $1 -eq 0 ]]; then
			printf "Building $current_dir failed with exit code $1\n"
			printf "$(date +'%Y-%m-%d@%H:%M:%S') $app_directory $1\n" >> "$log_dir/$repo_name.log"
		fi
	}

	# Clean up build leftovers to free disk space
	cleanup () {

		clear_old_package () {

			# Create an index of the package archives
			index_archive () {

				for f in $(ls $app_directory | grep *"$pkg_pattern"*); do
					printf "$app_directory $f\n" >> "$work_dir/archive.index"
				done

			}

			if [[ -f "$work_dir/archive.index" && -s "$work_dir/archive.index" ]]; then
				readarray archive_index < "$work_dir/archive.index"

				# Remove old packages
				for arr in "${archive_index[@]}"; do
					path=${arr[1]}
					filenames="${arr[@]:1}"

					# If we match a line that means it is already in the index
					if [[ "$path" == "$app_directory" ]]; then
						# Find all package archives matching pattern and remove them
						for file in filenames; do
							rm_target=$(find $pkg_target_dir -name $file 2> /dev/null)

							rm $rm_target
						done
					fi
				done

				new_pkg=1

				# Remove old archive.index entries
				for arr in "${archive_index[@]}"; do
					path=${arr[1]}
					filenames="${arr[@]:1}"


					# If we match a line that means it is already in the index
					if [[ "$path" == "$app_directory" ]]; then

						# Remove all lines containing $path/$app_directory
						grep -v "$path" "$work_dir/archive.index" > "$work_dir/archive.index.inter"
						mv "$work_dir/archive.index.inter" "$work_dir/archive.index"

						# Index new package archives
						index_archive

						new_pkg=0

					fi

				done
			else
				index_archive
			fi

			# The package is new, lets index it
			if [[ $new_pkg -eq 1 ]]; then
				index_archive
			fi

		}

		if [[ $cleanup -eq 1 ]]; then

			# TODO: I am hard coding this for now, will change later
			if [[ "$app_directory" == *"/core-"* ]]; then
				mkdir -p $pkg_target_dir/core
				clear_old_package
				cp $app_directory/$pkg_pattern $pkg_target_dir/core/
			elif [[ "$app_directory" == *"/extra-"* ]]; then
				mkdir -p $pkg_target_dir/extra
				clear_old_package
				cp $app_directory/$pkg_pattern $pkg_target_dir/extra/
			elif [[ "$app_directory" == *"/community-"* ]]; then
				mkdir -p $pkg_target_dir/community
				clear_old_package
				cp $app_directory/$pkg_pattern $pkg_target_dir/community/
			else
				mkdir -p $pkg_target_dir
				clear_old_package
				cp $app_directory/$pkg_pattern $pkg_target_dir
			fi
			
			cd $app_directory
			rm -rf *
			git checkout .
		fi
	}

	build_package () {
		# If the app version does not match we will assume an update is available and rebuild
		printf "\e[32mNow Building: $app_directory\e[0m\n"
		cd $app_directory

		# Ensure dependencies are installed
		source ./PKGBUILD
		sudo pacman -Sy --noconfirm --needed ${depends[*]} ${makedepends[*]} ${checkdepends[*]}

		# Import pgp keys if any
		import_pgp_keys

		# Build the package
		( timeout ${timeout_after} makepkg ${makepkg_params[@]} )
		error_check $?

		cleanup
	}

	cd $work_dir

	# If pkg.index.old exists this is not the first run
	# so we can start checking for updates
	if [[ -f "$work_dir/pkg.index.old" ]]; then

		readarray i < "$work_dir/pkg.index"

		for arr in "${i[@]}"; do
				cd $work_dir

				for j in $arr; do
					if (( loop % 2 )); then
						app_version="$j"
					else
						app_directory=$(dirname $j)
					fi
					(( loop=loop+1 ))
				done

				# Check if package already present in pkg.index.old, if it is the package was
				# build previously and should only check for updates
				result=$(grep "^${app_directory}/" "$work_dir/pkg.index.old")
				result_exit=$?

				# Set var to error to assure package build if app_directory is missing from the pkg.index.old
				# this will trigger when new packages are added to the repo
				if [[ $result_exit -eq 1 ]]; then
					build_package
				else
					for q in $result; do

						if (( looptwo % 2 )); then
							old_app_version="$q"

							if [[ "$old_app_version" != "$app_version" ]]; then
								build_package
							fi
						fi
						(( looptwo=looptwo+1 ))

					done
				fi
			done
	else
		# If this is the first run we can assume we will have to build everything
		# not the most elegant solution but it will do for now
		printf "pkg.index.old does not exist, assuming first run\n"

		readarray i < "$work_dir/pkg.index"

		for arr in "${i[@]}"; do
			cd $work_dir

			for j in $arr; do
				if (( loop % 2 )); then
					go_run=1
				else
					app_directory=$(dirname $j)
				fi
				(( loop=loop+1 ))
			done

			if [[ "$go_run" -eq 1 ]]; then
				build_package
			fi

			if [[ "$go_run" == 1 ]]; then
				go_run=0
			fi
		done
	fi
}

# Pull the latest Arch pkgbuild repo
update_pkgbuild () {
	cd $work_dir

	git_error_check () {
		if [[ ! $1 -eq 0  ]]; then
			printf "\e[31mFailed to git clone/pull '$repo' exited with '$1', quitting...\e[0m\n"
			exit 1
		fi
	}
	
	# Check if repo exists
	if [[ ! -d ./$repo_name ]]; then
		printf "Repo does not exist, cloning $repo to $repo_name\nthis may take a while...\n"
		git clone $repo $repo_name
		git_error_check $?
	else
		printf "Repo $repo_name exists, pulling diff\nthis may take a while...\n"
		cd $repo_name
		git pull
		git_error_check $?
	fi
}

index_packages () {
	cd $work_dir

	index () {
		source $f
		printf "$f $pkgver-$pkgrel\n" >> $work_dir/pkg.index
	}

	for f in $(find "$(pwd)" -name 'PKGBUILD' 2> /dev/null); do

		# Do not build if in exclude list
		if [[ ${#exclude[@]} != 0 ]]; then

			for a in ${exclude[@]}; do
				if [[ $f == *"$a"* ]]; then
					go_exclude=1
				fi
			done

			if [[ $go_exclude -eq 1 ]]; then
					printf "\e[32mExcluding: $f\e[0m\n"
					go_exclude=0
			else
				index
			fi

		else
			index
		fi

	done
}

# makepkg does not allow running as root, kill the program if root
if [[ $(id -u) -eq 0 ]]; then
	printf "\e[31mScript is running as root, the script should be run as a normal user, quitting...\e[0m\n"
	exit 1
fi

# If $1 is set we will assume the user is overwriting the config from the command line.
if [[ -v 1 && $1 != "-" ]]; then
	source "/etc/arkane-buildbot/$1"

	if [[ ! $? -eq 0 ]]; then
		printf "\e[31mFailed to run custom config file '$1', quitting...\e[0m\n"
		exit 1
	fi
else
	default_config='/etc/arkane-buildbot/default'

	source $default_config
	
	if [[ ! $? -eq 0 ]]; then
		printf "\e[31mFailed to run default config file '$default_config', quitting...\e[0m\n"
		exit 1
	fi
fi

# These variables are required to all be defined in the config file
if [[ ! -v log_dir || ! -v repo || ! -v repo_name ]]; then
	printf "\e[31mNot all required variables have been configured in the config file, quitting...\e[0m\n"
	exit 1
fi

# Ensure log folder exists
mkdir -p $log_dir

# Ensure log_dir is created properly
if [[ ! -d $log_dir ]]; then
	printf "\e[31mFailed to create '$log_dir', quitting...\e[0m\n"
	exit 1
fi

# An index of all packages in the repo
if [[ -f $work_dir/pkg.index ]]; then
	mv "$work_dir/pkg.index" "$work_dir/pkg.index.old"
	touch "$work_dir/pkg.index"
fi

# An index of all build packages
if [[ ! -f $work_dir/archive.index ]]; then
	touch "$work_dir/archive.index"
fi

main
